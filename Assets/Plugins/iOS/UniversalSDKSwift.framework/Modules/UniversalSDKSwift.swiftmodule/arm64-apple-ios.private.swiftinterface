// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UniversalSDKSwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AuthenticationServices
import CryptoKit
import FBSDKCoreKit
import FBSDKLoginKit
import Foundation
import GoogleSignIn
import SafariServices
import Swift
@_exported import UniversalSDKSwift
import _Concurrency
import _StringProcessing
@objc @_hasMissingDesignatedInitializers @objcMembers public class SDKLoginResult : ObjectiveC.NSObject {
  @objc public var userID: Swift.String? {
    @objc get
  }
  @objc public var json: Swift.String? {
    @objc get
  }
  @objc deinit
}
public enum UniversalSDKError : Swift.Error {
  public enum LoginErrorReason {
    case userCancelled
    case googleError
    case fbAppIdNull
    case fbAccessTokenNull
    case appleException
    case appleCredentialFailed
    public static func == (a: UniversalSDKSwift.UniversalSDKError.LoginErrorReason, b: UniversalSDKSwift.UniversalSDKError.LoginErrorReason) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case authAgentError(message: Swift.String?)
  case internalError(message: Swift.String?)
  case loginErrorReason(reason: UniversalSDKSwift.UniversalSDKError.LoginErrorReason)
  case untypedError(error: any Swift.Error)
}
extension UniversalSDKSwift.UniversalSDKError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension UniversalSDKSwift.UniversalSDKError : Foundation.CustomNSError {
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
  public static var errorDomain: Swift.String {
    get
  }
}
public enum UniversalSDKErrorUserInfoKey : Swift.String {
  case underlyingError
  case code
  case mssage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct LoginResult : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum LoginType : Swift.Int {
  case google
  case facebook
  case apple
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UniversalAPIClient : ObjectiveC.NSObject {
  @objc public static let shared: UniversalSDKSwift.UniversalAPIClient
  @objc public func setupSDK()
  @objc public func socialLogin(loginType: Swift.Int, inViewController vc: UIKit.UIViewController, completionHandler completion: @escaping (UniversalSDKSwift.SDKLoginResult?, (any Swift.Error)?) -> Swift.Void)
  @objc public func openSafariView(vc: UIKit.UIViewController, url strUrl: Swift.String)
  @objc public func testErrorFunc(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func testErrorCodeFunc(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func testErrorMsgFunc(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension UniversalSDKSwift.UniversalAPIClient : SafariServices.SFSafariViewControllerDelegate {
}
extension UniversalSDKSwift.UniversalSDKError.LoginErrorReason : Swift.Equatable {}
extension UniversalSDKSwift.UniversalSDKError.LoginErrorReason : Swift.Hashable {}
extension UniversalSDKSwift.UniversalSDKErrorUserInfoKey : Swift.Equatable {}
extension UniversalSDKSwift.UniversalSDKErrorUserInfoKey : Swift.Hashable {}
extension UniversalSDKSwift.UniversalSDKErrorUserInfoKey : Swift.RawRepresentable {}
extension UniversalSDKSwift.LoginType : Swift.Equatable {}
extension UniversalSDKSwift.LoginType : Swift.Hashable {}
extension UniversalSDKSwift.LoginType : Swift.RawRepresentable {}
